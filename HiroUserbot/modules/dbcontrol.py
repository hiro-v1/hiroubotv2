from HiroUserbot import *
from datetime import datetime, timedelta

from dateutil.relativedelta import relativedelta
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pytz import timezone
from HiroUserbot.core.function.emoji import emoji
from HiroUserbot import *
from HiroUserbot.config import USER_ID
from .eval import *

async def prem_user(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    Tm = await message.reply(f"{prs}<b>·¥ò Ä·¥è·¥Ñ·¥Ñ·¥ás…™…¥…¢</b>...")
    if message.from_user.id not in await get_seles():
        return await Tm.edit(
            f"{ggl}<b>·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥…™ ·¥Ä…¥·¥Ö·¥Ä  ú·¥Ä Ä·¥ús ·¥ç·¥á…¥·¥ä·¥Ä·¥Ö…™  Ä·¥ás·¥á ü ü·¥á Ä ·¥õ·¥á Ä ü·¥á ô…™ ú ·¥Ö·¥Ä ú·¥ú ü·¥ú</b>"
        )
    user_id, get_bulan = await extract_user_and_reason(message)
    if not user_id:
        return await Tm.edit(f"{ggl}<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á -  ô·¥ú ü·¥Ä…¥</b>")
    try:
        get_id = (await client.get_users(user_id)).id
    except Exception as error:
        return await Tm.edit(error)
    if not get_bulan:
        get_bulan = 1
    premium = await get_prem()
    if get_id in premium:
        return await Tm.edit(f"{sks}<b>·¥Ö…™·¥Ä s·¥ú·¥Ö·¥Ä ú  ô…™s·¥Ä ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>")
    added = await add_prem(get_id)
    if added:
        now = datetime.now(timezone("asia/Jakarta"))
        expired = now + relativedelta(months=int(get_bulan))
        await set_expired_date(get_id, expired)
        await Tm.edit(
            f"{sks}{get_id} ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ s·¥á ü·¥Ä·¥ç·¥Ä {get_bulan}  ô·¥ú ü·¥Ä…¥, s…™ ü·¥Ä ú·¥ã·¥Ä…¥  ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ö…™ @{bot.me.username}"
        )
        await bot.send_message(
            OWNER_ID,
            f"‚Ä¢ {message.from_user.id} ‚îÄ> {get_id} ‚Ä¢",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üë§ profil",
                            callback_data=f"profil {message.from_user.id}",
                        ),
                        InlineKeyboardButton(
                            "profil üë§", callback_data=f"profil {get_id}"
                        ),
                    ],
                ]
            ),
        )
    else:
        await Tm.delete()
        await message.edit(f"{ggl}<b>·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥ã·¥á·¥õ·¥Ä ú·¥ú…™</b>")


async def unprem_user(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    user_id = await extract_user(message)
    Tm = await message.reply(f"{prs}<b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ . . .</b>")
    if not user_id:
        return await Tm.edit(
            f"{ggl}<b> ô·¥Ä ü·¥Äs ·¥ò·¥ás·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ä·¥õ·¥Ä·¥ú  ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )
    try:
        user = await client.get_users(user_id)
    except Exception as error:
        await Tm.edit(error)
    delpremium = await get_prem()
    if user.id not in delpremium:
        return await Tm.edit(f"{ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    removed = await remove_prem(user.id)
    if removed:
        await Tm.edit(f"{sks}<b> {user.mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús</b>")
    else:
        await Tm.delete()
        await message.edit(f"{ggl}<b>·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥ã·¥á·¥õ·¥Ä ú·¥ú…™</b>")


async def get_prem_user(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    text = ""
    count = 0
    for user_id in await get_prem():
        try:
            user = await bot.get_users(user_id)
            count += 1
            userlist = f"‚Ä¢ {count}: <a href=tg://user?id={user.id}>{user.first_name} {user.last_name or ''}</a> > <code>{user.id}</code>"
        except Exception:
            continue
        text += f"{userlist}\n"
    if not text:
        await message.reply(f"{ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  è·¥Ä…¥…¢ ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    else:
        await message.reply(text)


async def add_blaclist(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    Tm = await message.edit(f"{prs}<b>·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä</b>")
    chat_id = message.chat.id
    blacklist = await get_chat(client.me.id)
    if chat_id in blacklist:
        return await Tm.edit(f"{sks}<b>…¢ Ä·¥è·¥ú·¥ò …™…¥…™ s·¥ú·¥Ö·¥Ä ú ·¥Ä·¥Ö·¥Ä ·¥Ö·¥Ä ü·¥Ä·¥ç  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ</b>")
    add_blacklist = await add_chat(client.me.id, chat_id)
    if add_blacklist:
        await Tm.edit(f"{sks}<b> ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ã·¥á ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç</b>")
    else:
        await Tm.edit(f"{ggl}<b>·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥ã·¥á·¥õ·¥Ä ú·¥ú…™</b>")
        await asyncio.sleep(2)


async def del_blacklist(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    Tm = await message.edit(f"<b>{prs}·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä . . .</b>")
    try:
        if not get_arg(message):
            chat_id = message.chat.id
        else:
            chat_id = int(message.command[1])
        blacklist = await get_chat(client.me.id)
        if chat_id not in blacklist:
            return await Tm.edit(f"{ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç</b>")
        del_blacklist = await remove_chat(client.me.id, chat_id)
        if del_blacklist:
            await Tm.edit(f"{sks}<b> ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç</b>")
        else:
            await Tm.edit(f"{ggl}<b>·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥ã·¥á·¥õ·¥Ä ú·¥ú…™</b>")
    except Exception as error:
        await Tm.edit(error)
        await asyncio.sleep(2)


async def get_blacklist(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    Tm = await message.edit(f"<b>{prs}·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä . . .</b>")
    msg = f"<b>{prs}·¥õ·¥è·¥õ·¥Ä ü  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ {len(await get_chat(client.me.id))}</b>\n\n"
    for X in await get_chat(client.me.id):
        try:
            get = await client.get_chat(X)
            msg += f"{sks}<b>‚Ä¢ {get.title} | <code>{get.id}</code></b>\n"
        except:
            msg += f"{sks}<b>‚Ä¢ <code>{X}</code></b>\n"
    await message.edit(msg)


async def rem_all_blacklist(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    msg = await message.edit(f"{prs}<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás....</b>", quote=True)
    get_bls = await get_chat(client.me.id)
    if len(get_bls) == 0:
        return await msg.edit(f"{ggl}<b>·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä ·¥ã·¥ès·¥è…¥…¢</b>")
    for X in get_bls:
        await remove_chat(client.me.id, X)
    await msg.edit(f"{sks}<b>s·¥á·¥ç·¥ú·¥Ä ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç ·¥õ·¥á ü·¥Ä ú  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús</b>")


async def seles_user(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    user_id = await extract_user(message)
    Tm = await message.reply(f"{prs}<b>·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä . . .</b>")
    if not user_id:
        return await Tm.edit(
            f"{ggl}<b> ô·¥Ä ü·¥Äs ·¥ã·¥á ·¥ò·¥ás·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ä·¥õ·¥Ä·¥ú  ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )
    try:
        user = await client.get_users(user_id)
    except Exception as error:
        await Tm.edit(error)
    reseller = await get_seles()
    if user.id in reseller:
        return await Tm.edit(f"{sks}<b>s·¥ú·¥Ö·¥Ä ú ·¥ç·¥á…¥·¥ä·¥Ä·¥Ö…™  Ä·¥ás·¥á ü ü·¥á Ä</b>.")
    added = await add_seles(user.id)
    if added:
        await add_prem(user.id)
        await Tm.edit(f"{sks}<b>{user.mention} ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥·¥ä·¥Ä·¥Ö…™  Ä·¥ás·¥á ü ü·¥á Ä</b>")
    else:
        await Tm.delete()
        await message.edit(f"{ggl}<b>·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥ã·¥á·¥õ·¥Ä ú·¥ú…™</b>")


async def unseles_user(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    user_id = await extract_user(message)
    Tm = await message.reply(f"{prs}<b>·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä . . .</b>")
    if not user_id:
        return await Tm.edit(
            f"{ggl}<b> ô·¥Ä ü·¥Äs ·¥ò·¥ás·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ä·¥õ·¥Ä·¥ú  ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</n>"
        )
    try:
        user = await client.get_users(user_id)
    except Exception as error:
        await Tm.edit(error)
    delreseller = await get_seles()
    if user.id not in delreseller:
        return await Tm.edit(f"{ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    removed = await remove_seles(user.id)
    if removed:
        await remove_prem(user.id)
        await Tm.edit(f"{sks}{user.mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús")
    else:
        await Tm.delete()
        await message.edit(f"{ggl}<b>·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥ã·¥á·¥õ·¥Ä ú·¥ú…™</b>")


async def get_seles_user(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    text = ""
    count = 0
    for user_id in await get_seles():
        try:
            user = await bot.get_users(user_id)
            count += 1
            user = f"‚Ä¢ {count}: <a href=tg://user?id={user.id}>{user.first_name} {user.last_name or ''}</a> > <code>{user.id}</code>"
        except Exception:
            continue
        text += f"{user}\n"
    if not text:
        await message.edit(f"{ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  è·¥Ä…¥…¢ ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    else:
        await message.edit(text)


# ========================== #
# ùîªùî∏ùïãùî∏ùîπùî∏ùïäùîº ùîºùïè‚ÑôùïÄ‚Ñùùîºùîª #
# ========================== #


async def expired_add(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    Tm = await message.reply(f"{prs}<b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ . . .</b>")
    user_id, get_day = await extract_user_and_reason(message)
    if not user_id:
        return await Tm.edit(f"{ggl}<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á -  ú·¥Ä Ä…™</b>")
    try:
        get_id = (await client.get_users(user_id)).id
    except Exception as error:
        return await Tm.edit(error)
    if not get_day:
        get_day = 30
    now = datetime.now(timezone("asia/Jakarta"))
    expire_date = now + timedelta(days=int(get_day))
    await set_expired_date(user_id, expire_date)
    await Tm.edit(f"{sks}{get_id} <b>·¥õ·¥á ü·¥Ä ú ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ s·¥á ü·¥Ä·¥ç·¥Ä {get_day}  ú·¥Ä Ä…™</b>.")


async def expired_cek(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    user_id = await extract_user(message)
    if not user_id:
        return await message.reply(f"{ggl}<b>·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    expired_date = await get_expired_date(user_id)
    if expired_date is None:
        await message.reply(f"{ggl}{user_id} <b> ô·¥á ü·¥ú·¥ç ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥.</b>")
    else:
        remaining_days = (expired_date - datetime.now()).days
        await message.reply(
            f"{sks}{user_id} ·¥Ä·¥ã·¥õ…™“ì  ú…™…¥…¢…¢·¥Ä {expired_date.strftime('%d-%m-%Y %H:%M:%S')}. s…™s·¥Ä ·¥°·¥Ä·¥ã·¥õ·¥ú ·¥Ä·¥ã·¥õ…™“ì {remaining_days}  ú·¥Ä Ä…™."
        )


async def un_expired(client, message):
    ggl = await EMO.GAGAL(client)
    sks = await EMO.BERHASIL(client)
    prs = await EMO.PROSES(client)
    ttl = await EMO.JUDUL(client)
    user_id = await extract_user(message)
    Tm = await message.reply(f"{prs}</b>·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás. . .</b>")
    if not user_id:
        return await Tm.edit(f"{ggl}<b>user ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await Tm.edit(error)
    await rem_expired_date(user.id)
    return await Tm.edit(f"{sks}<b> {user.id} ·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ú·¥Ä·¥ò·¥ús</b>")


async def bcast_cmd(_, message):
    if message.reply_to_message:
        x = message.reply_to_message.id
        y = message.chat.id
    
    if len(message.command) > 1:
        return await message.reply(
            f"<b>s…™ ü·¥Ä·¥ã·¥Ä…¥ s·¥á Ä·¥õ·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs ·¥ò·¥ás·¥Ä…¥  è·¥Ä…¥…¢ …™…¥…¢…™…¥ ·¥Ö…™s…™·¥Ä Ä·¥ã·¥Ä…¥.</b>"
        )

    kntl = 0
    mmk = []
    jmbt = len(await get_served_users())
    babi = await get_served_users()
    for xx in babi:
        mmk.append(int(xx["user_id"]))
    if OWNER_ID in mmk:
        mmk.remove(OWNER_ID)
    for i in mmk:
        try:
            m = (
                await bot.forward_messages(i, y, x)
                if message.reply_to_message
                else await bot.send_message(i, y, x)
            )
            kntl += 1
        except:
            pass
    return await message.reply(
        f"**  ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥ã·¥á `{kntl}` ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä, ·¥Ö·¥Ä Ä…™ `{jmbt}` ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä.**",
    )

@HIRO.BOT("prem")
@HIRO.UBOT("prem")
@HIRO.SELES
async def _(client, message):
    await prem_user(client, message)

@HIRO.BOT("unprem")
@HIRO.UBOT("unprem")
@HIRO.SELES
async def _(client, message):
    await unprem_user(client, message)


@HIRO.BOT("getprem")
@HIRO.UBOT("getprem")
@HIRO.SELES
async def _(client, message):
    await get_prem_user(client, message)


@HIRO.BOT("seles")
@HIRO.UBOT("seles")
@HIRO.OWNER
async def _(client, message):
    await seles_user(client, message)


@HIRO.BOT("unseles")
@HIRO.UBOT("unseles")
@HIRO.OWNER
async def _(client, message):
    await unseles_user(client, message)


@HIRO.BOT("getseles")
@HIRO.UBOT("getseles")
@HIRO.OWNER
async def _(client, message):
    await get_seles_user(client, message)


@HIRO.BOT("time")
@HIRO.UBOT("time")
@HIRO.OWNER
async def _(client, message):
    await expired_add(client, message)


@HIRO.BOT("cek")
@HIRO.UBOT("cek")
@HIRO.OWNER
async def _(client, message):
    await expired_cek(client, message)


@HIRO.BOT("untime")
@HIRO.UBOT("untime")
@HIRO.OWNER
async def _(client, message):
    await un_expired(client, message)


@HIRO.CALLBACK("restart")
async def _(client, callback_query):
    await cb_restart(client, callback_query)


@HIRO.CALLBACK("gitpull")
@HIRO.OWNER
async def _(client, callback_query):
    await cb_gitpull(client, callback_query)


@HIRO.BOT("bcast")
@HIRO.OWNER
async def _(client, message):
    await bcast_cmd(client, message)

@HIRO.UBOT("addbl")
async def _(client, message):
    await add_blaclist(client, message)


@HIRO.UBOT("unbl")
async def _(client, message):
    await del_blacklist(client, message)


@HIRO.UBOT("rallbl")
async def _(client, message):
    await rem_all_blacklist(client, message)


@HIRO.UBOT("listbl")
async def _(client, message):
    await get_blacklist(client, message)